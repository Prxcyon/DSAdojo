[
  {
    "id": "bit-manipulation-easy-cpp-q1",
    "type": "multiple-choice",
    "question": "What does the bitwise AND operation (&) do in C++?",
    "options": [
      "Returns 1 only when both bits are 1",
      "Returns 1 when at least one bit is 1",
      "Returns 1 when bits are different",
      "Returns 1 when both bits are 0"
    ],
    "correctAnswer": 0,
    "explanation": "AND returns 1 only when both corresponding bits are 1."
  },
  {
    "id": "bit-manipulation-easy-cpp-q2",
    "type": "fill-blank",
    "question": "The bitwise _____ operation (~) flips all bits in a number in C++.",
    "correctAnswer": "NOT",
    "explanation": "NOT operation (~) flips all bits (1 becomes 0, 0 becomes 1)."
  },
  {
    "id": "bit-manipulation-easy-cpp-q3",
    "type": "multiple-choice",
    "question": "What is the result of 5 & 3 in C++?",
    "options": [
      "1",
      "7",
      "6",
      "2"
    ],
    "correctAnswer": 0,
    "explanation": "5 (101) & 3 (011) = 001 = 1."
  },
  {
    "id": "bit-manipulation-easy-cpp-q4",
    "type": "code-completion",
    "question": "Complete the function to check if a number is even:",
    "code": "bool isEven(int n) {\n    return (n & _____) == 0;\n}",
    "blanks": ["1"],
    "explanation": "n & 1 checks the least significant bit. If 0, number is even."
  },
  {
    "id": "bit-manipulation-easy-cpp-q5",
    "type": "fill-blank",
    "question": "Left shift (<<) by n positions is equivalent to multiplying by _____.",
    "correctAnswer": "2^n",
    "explanation": "Left shift by n positions multiplies the number by 2^n."
  },
  {
    "id": "bit-manipulation-easy-cpp-q6",
    "type": "multiple-choice",
    "question": "What does XOR (^) return when both bits are the same?",
    "options": [
      "0",
      "1",
      "The original bit",
      "Undefined behavior"
    ],
    "correctAnswer": 0,
    "explanation": "XOR returns 0 when both bits are the same (0^0=0, 1^1=0)."
  },
  {
    "id": "bit-manipulation-easy-cpp-q7",
    "type": "drag-drop",
    "question": "Match the C++ bitwise operations with their symbols:",
    "items": ["Bitwise AND", "Bitwise OR", "Bitwise XOR", "Bitwise NOT"],
    "correctOrder": ["&", "|", "^", "~"],
    "explanation": "Standard bitwise operation symbols: AND(&), OR(|), XOR(^), NOT(~)."
  },
  {
    "id": "bit-manipulation-easy-cpp-q8",
    "type": "fill-blank",
    "question": "Right shift (>>) by n positions is equivalent to dividing by _____ for positive numbers.",
    "correctAnswer": "2^n",
    "explanation": "Right shift by n positions divides by 2^n (integer division)."
  },
  {
    "id": "bit-manipulation-easy-cpp-q9",
    "type": "multiple-choice",
    "question": "What is the result of any number XOR with itself in C++?",
    "options": [
      "0",
      "1",
      "The number itself",
      "Compiler error"
    ],
    "correctAnswer": 0,
    "explanation": "Any number XOR with itself always equals 0 (n ^ n = 0)."
  },
  {
    "id": "bit-manipulation-easy-cpp-q10",
    "type": "code-completion",
    "question": "Complete the function to set the i-th bit:",
    "code": "int setBit(int n, int i) {\n    return n | (1 << _____);\n}",
    "blanks": ["i"],
    "explanation": "Use OR with (1 << i) to set the i-th bit."
  },
  {
    "id": "bit-manipulation-medium-cpp-q1",
    "type": "multiple-choice",
    "question": "How do you clear the i-th bit of a number in C++?",
    "options": [
      "n & ~(1 << i)",
      "n | (1 << i)",
      "n ^ (1 << i)",
      "n << i"
    ],
    "correctAnswer": 0,
    "explanation": "Use AND with complement of (1 << i) to clear i-th bit."
  },
  {
    "id": "bit-manipulation-medium-cpp-q2",
    "type": "code-completion",
    "question": "Complete the function to count set bits using built-in:",
    "code": "int countSetBits(int n) {\n    return __builtin_____(n);\n}",
    "blanks": ["popcount"],
    "explanation": "__builtin_popcount() counts the number of set bits efficiently."
  },
  {
    "id": "bit-manipulation-medium-cpp-q3",
    "type": "fill-blank",
    "question": "Brian Kernighan's algorithm uses n & (n-1) to clear the _____ set bit.",
    "correctAnswer": "rightmost",
    "explanation": "n & (n-1) clears the rightmost set bit efficiently."
  },
  {
    "id": "bit-manipulation-medium-cpp-q4",
    "type": "drag-drop",
    "question": "Arrange steps to find single number in vector where all others appear twice:",
    "items": ["int result = 0", "Use XOR property", "for(int num : vec)", "return result"],
    "correctOrder": [0, 2, 1, 3],
    "explanation": "XOR all elements; duplicates cancel out, leaving single number."
  },
  {
    "id": "bit-manipulation-medium-cpp-q5",
    "type": "multiple-choice",
    "question": "Which C++ built-in function checks if a number is power of 2?",
    "options": [
      "__builtin_popcount(n) == 1",
      "__builtin_clz(n)",
      "__builtin_ctz(n)",
      "__builtin_parity(n)"
    ],
    "correctAnswer": 0,
    "explanation": "Power of 2 has exactly one set bit, so popcount should be 1."
  },
  {
    "id": "bit-manipulation-medium-cpp-q6",
    "type": "fill-blank",
    "question": "To toggle the i-th bit in C++, use the operation n _____ (1 << i).",
    "correctAnswer": "^",
    "explanation": "XOR with (1 << i) toggles the i-th bit."
  },
  {
    "id": "bit-manipulation-medium-cpp-q7",
    "type": "code-completion",
    "question": "Complete the function to reverse bits using built-in:",
    "code": "uint32_t reverseBits(uint32_t n) {\n    uint32_t result = 0;\n    for (int i = 0; i < 32; i++) {\n        result = (result << 1) | (n & 1);\n        n >>= _____;\n    }\n    return result;\n}",
    "blanks": ["1"],
    "explanation": "Extract each bit from right and build result from left."
  },
  {
    "id": "bit-manipulation-medium-cpp-q8",
    "type": "multiple-choice",
    "question": "What does n & (-n) give you in C++?",
    "options": [
      "Rightmost set bit",
      "Leftmost set bit",
      "Number of set bits",
      "Two's complement"
    ],
    "correctAnswer": 0,
    "explanation": "n & (-n) isolates the rightmost set bit."
  },
  {
    "id": "bit-manipulation-medium-cpp-q9",
    "type": "fill-blank",
    "question": "The C++ built-in function _____ counts trailing zeros in a number.",
    "correctAnswer": "__builtin_ctz",
    "explanation": "__builtin_ctz() counts trailing zeros efficiently."
  },
  {
    "id": "bit-manipulation-medium-cpp-q10",
    "type": "multiple-choice",
    "question": "Which header is needed for bitset in C++?",
    "options": [
      "<bitset>",
      "<bits>",
      "<bit>",
      "<binary>"
    ],
    "correctAnswer": 0,
    "explanation": "#include <bitset> is needed for std::bitset operations."
  },
  {
    "id": "bit-manipulation-hard-cpp-q1",
    "type": "code-completion",
    "question": "Complete the function to find two non-repeating elements:",
    "code": "vector<int> findTwoNonRepeating(vector<int>& arr) {\n    int xorAll = 0;\n    for (int num : arr) {\n        xorAll ^= num;\n    }\n    \n    // Find rightmost set bit\n    int rightmostSetBit = xorAll & (-xorAll);\n    \n    int num1 = 0, num2 = 0;\n    for (int num : arr) {\n        if (num & rightmostSetBit) {\n            num1 ^= num;\n        } else {\n            num2 ^= _____;\n        }\n    }\n    \n    return {num1, num2};\n}",
    "blanks": ["num"],
    "explanation": "Partition array based on rightmost set bit of XOR result."
  },
  {
    "id": "bit-manipulation-hard-cpp-q2",
    "type": "multiple-choice",
    "question": "What is the time complexity of GCD using bit manipulation (Binary GCD)?",
    "options": [
      "O(log min(a,b))",
      "O(log max(a,b))",
      "O(âˆšn)",
      "O(n)"
    ],
    "correctAnswer": 0,
    "explanation": "Binary GCD (Stein's algorithm) has O(log min(a,b)) complexity."
  },
  {
    "id": "bit-manipulation-hard-cpp-q3",
    "type": "fill-blank",
    "question": "The _____ algorithm efficiently computes x^n using bit manipulation and repeated squaring.",
    "correctAnswer": "fast exponentiation",
    "explanation": "Fast exponentiation uses binary representation of exponent."
  },
  {
    "id": "bit-manipulation-hard-cpp-q4",
    "type": "drag-drop",
    "question": "Arrange steps for implementing bitwise trie in C++:",
    "items": ["struct TrieNode", "TrieNode* children[2]", "Insert function", "Search function"],
    "correctOrder": [0, 1, 2, 3],
    "explanation": "Create trie node structure, then implement insert and search operations."
  },
  {
    "id": "bit-manipulation-hard-cpp-q5",
    "type": "code-completion",
    "question": "Complete the fast exponentiation using bit manipulation:",
    "code": "long long power(long long base, long long exp) {\n    long long result = 1;\n    while (exp > 0) {\n        if (exp & 1) {\n            result *= base;\n        }\n        base *= base;\n        exp >>= _____;\n    }\n    return result;\n}",
    "blanks": ["1"],
    "explanation": "Check if exponent is odd, then square base and halve exponent."
  },
  {
    "id": "bit-manipulation-hard-cpp-q6",
    "type": "multiple-choice",
    "question": "Which C++ built-in function counts leading zeros?",
    "options": [
      "__builtin_clz()",
      "__builtin_ctz()",
      "__builtin_popcount()",
      "__builtin_parity()"
    ],
    "correctAnswer": 0,
    "explanation": "__builtin_clz() counts leading zeros in a number."
  },
  {
    "id": "bit-manipulation-hard-cpp-q7",
    "type": "fill-blank",
    "question": "In C++20, the _____ header provides standardized bit manipulation functions.",
    "correctAnswer": "<bit>",
    "explanation": "C++20 introduced <bit> header with std::popcount, std::countr_zero, etc."
  },
  {
    "id": "bit-manipulation-hard-cpp-q8",
    "type": "code-completion",
    "question": "Complete the function using unordered_set:",
    "code": "#include <unordered_set>\nbool hasPairWithXor(vector<int>& arr, int target) {\n    unordered_set<int> seen;\n    for (int num : arr) {\n        if (seen.count(target ^ num)) {\n            return true;\n        }\n        seen._____(num);\n    }\n    return false;\n}",
    "blanks": ["insert"],
    "explanation": "For each number, check if target^num exists in seen set."
  },
  {
    "id": "bit-manipulation-hard-cpp-q9",
    "type": "multiple-choice",
    "question": "What does std::bitset<32> provide in C++?",
    "options": [
      "Fixed-size bit array with 32 bits",
      "Dynamic bit array",
      "32-bit integer wrapper",
      "Bit manipulation functions"
    ],
    "correctAnswer": 0,
    "explanation": "std::bitset<32> provides a fixed-size array of 32 bits with convenient operations."
  },
  {
    "id": "bit-manipulation-hard-cpp-q10",
    "type": "fill-blank",
    "question": "To find the position of the rightmost set bit efficiently in C++, use _____ function.",
    "correctAnswer": "__builtin_ctz",
    "explanation": "__builtin_ctz() counts trailing zeros, giving position of rightmost set bit."
  }
]