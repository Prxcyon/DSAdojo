[
  {
    "id": "java-array-easy-q1",
    "type": "multiple-choice",
    "question": "What is the index of the first element in a Java array?",
    "options": [
      "0",
      "1",
      "-1",
      "undefined"
    ],
    "correctAnswer": 0,
    "explanation": "Java arrays are zero-indexed, meaning the first element is at index 0."
  },
  {
    "id": "java-array-easy-q2",
    "type": "multiple-choice",
    "question": "How do you find the length of an array `arr` in Java?",
    "options": [
      "arr.length",
      "arr.size()",
      "arr.length()",
      "length(arr)"
    ],
    "correctAnswer": 0,
    "explanation": "In Java, use arr.length (property, not method) to get array length."
  },
  {
    "id": "java-array-easy-q3",
    "type": "fill-blank",
    "question": "To declare an integer array of size 5 in Java: int[] arr = new int[_____];",
    "correctAnswer": "5",
    "explanation": "Array size is specified in square brackets during instantiation."
  },
  {
    "id": "java-array-easy-q4",
    "type": "multiple-choice",
    "question": "What will happen if you access arr[5] when arr = new int[5]?",
    "options": [
      "ArrayIndexOutOfBoundsException",
      "Returns 0",
      "Returns null",
      "Compilation error"
    ],
    "correctAnswer": 0,
    "explanation": "Accessing index 5 in array of size 5 throws ArrayIndexOutOfBoundsException."
  },
  {
    "id": "java-array-easy-q5",
    "type": "code-completion",
    "question": "Complete the code to access the first element of array:",
    "code": "int[] numbers = {10, 20, 30};\nint first = numbers[_____];",
    "blanks": ["0"],
    "explanation": "First element is always at index 0 in Java arrays."
  },
  {
    "id": "java-array-easy-q6",
    "type": "multiple-choice",
    "question": "Which method sorts an array in ascending order?",
    "options": [
      "Arrays.sort()",
      "Array.sort()",
      "sort()",
      "Collections.sort()"
    ],
    "correctAnswer": 0,
    "explanation": "Arrays.sort() from java.util.Arrays sorts arrays in ascending order."
  },
  {
    "id": "java-array-easy-q7",
    "type": "fill-blank",
    "question": "The last valid index of array `arr` is _____ .",
    "correctAnswer": "arr.length - 1",
    "explanation": "Last index is always length - 1 since arrays are zero-indexed."
  },
  {
    "id": "java-array-easy-q8",
    "type": "multiple-choice",
    "question": "What is the default value for elements in a new int array?",
    "options": [
      "0",
      "null",
      "undefined",
      "Random value"
    ],
    "correctAnswer": 0,
    "explanation": "Java initializes int array elements to 0 by default."
  },
  {
    "id": "java-array-easy-q9",
    "type": "drag-drop",
    "question": "Arrange the steps to create and initialize an array:",
    "items": ["Declare array variable", "Instantiate with new", "Initialize with values", "Access elements"],
    "correctOrder": [0, 1, 2, 3],
    "explanation": "Standard sequence: declare, instantiate, initialize, then access."
  },
  {
    "id": "java-array-easy-q10",
    "type": "multiple-choice",
    "question": "Which of the following creates an array with initial values?",
    "options": [
      "int[] arr = {1, 2, 3}",
      "int[] arr = new int[]{1, 2, 3}",
      "Both a and b",
      "Neither"
    ],
    "correctAnswer": 2,
    "explanation": "Both syntax forms create arrays with initial values in Java."
  },
  {
    "id": "java-array-medium-q1",
    "type": "code-completion",
    "question": "Complete the method to reverse an array in-place:",
    "code": "public static void reverse(int[] arr) {\n    int left = 0, right = arr._____ - 1;\n    while (left < right) {\n        int temp = arr[left];\n        arr[left] = arr[_____];\n        arr[right] = _____;\n        left++; right--;\n    }\n}",
    "blanks": ["length", "right", "temp"],
    "explanation": "Two-pointer approach to reverse array in-place."
  },
  {
    "id": "java-array-medium-q2",
    "type": "multiple-choice",
    "question": "What does Arrays.copyOf(arr, newLength) do?",
    "options": [
      "Creates new array with specified length",
      "Modifies original array",
      "Returns reference to original",
      "Throws exception"
    ],
    "correctAnswer": 0,
    "explanation": "Arrays.copyOf creates a new array with specified length, copying elements."
  },
  {
    "id": "java-array-medium-q3",
    "type": "fill-blank",
    "question": "To copy an array, you should use _____ to avoid shallow copy issues.",
    "correctAnswer": "Arrays.copyOf() or clone()",
    "explanation": "Arrays.copyOf() or clone() create proper copies, not just references."
  },
  {
    "id": "java-array-medium-q4",
    "type": "multiple-choice",
    "question": "Which is NOT a valid way to iterate through an array?",
    "options": [
      "for-each loop",
      "traditional for loop",
      "while loop",
      "forEach() method"
    ],
    "correctAnswer": 3,
    "explanation": "Arrays don't have forEach() method; that's for Collections."
  },
  {
    "id": "java-array-medium-q5",
    "type": "code-completion",
    "question": "Complete the method to find sum of array elements:",
    "code": "public static int sum(int[] arr) {\n    int total = 0;\n    for (int num : _____) {\n        total _____ num;\n    }\n    return total;\n}",
    "blanks": ["arr", "+="],
    "explanation": "Enhanced for loop to iterate and accumulate sum."
  },
  {
    "id": "java-array-medium-q6",
    "type": "multiple-choice",
    "question": "What creates an array of 5 elements, all initialized to 10?",
    "options": [
      "Arrays.fill(new int[5], 10)",
      "new int[5]{10}",
      "int[5] arr = 10",
      "Array.create(5, 10)"
    ],
    "correctAnswer": 0,
    "explanation": "Arrays.fill() fills existing array with specified value."
  },
  {
    "id": "java-array-medium-q7",
    "type": "fill-blank",
    "question": "To convert an array to List, use _____ method.",
    "correctAnswer": "Arrays.asList()",
    "explanation": "Arrays.asList() converts array to List (fixed-size)."
  },
  {
    "id": "java-array-medium-q8",
    "type": "drag-drop",
    "question": "Arrange steps to search for element in sorted array:",
    "items": ["Set left = 0, right = length-1", "Calculate mid", "Compare with target", "Update left or right"],
    "correctOrder": [0, 1, 2, 3],
    "explanation": "Binary search algorithm steps in correct order."
  },
  {
    "id": "java-array-medium-q9",
    "type": "multiple-choice",
    "question": "What is returned by Arrays.binarySearch() if element is not found?",
    "options": [
      "Negative insertion point",
      "-1",
      "0",
      "Exception is thrown"
    ],
    "correctAnswer": 0,
    "explanation": "Returns -(insertion point) - 1 if element not found."
  },
  {
    "id": "java-array-medium-q10",
    "type": "multiple-choice",
    "question": "What is the time complexity of accessing an element by index?",
    "options": [
      "O(1)",
      "O(n)",
      "O(log n)",
      "O(n log n)"
    ],
    "correctAnswer": 0,
    "explanation": "Array access by index is constant time O(1)."
  },
  {
    "id": "java-array-hard-q1",
    "type": "code-completion",
    "question": "Complete the method to remove duplicates from sorted array:",
    "code": "public static int removeDuplicates(int[] nums) {\n    if (nums.length == 0) return 0;\n    int i = 0;\n    for (int j = 1; j < nums._____; j++) {\n        if (nums[j] != nums[_____]) {\n            i++;\n            nums[_____] = nums[j];\n        }\n    }\n    return i + 1;\n}",
    "blanks": ["length", "i", "i"],
    "explanation": "Two-pointer technique to remove duplicates in-place."
  },
  {
    "id": "java-array-hard-q2",
    "type": "multiple-choice",
    "question": "Which approach is best for finding duplicates in an array?",
    "options": [
      "HashSet",
      "Nested loops",
      "Sorting first",
      "Boolean array"
    ],
    "correctAnswer": 0,
    "explanation": "HashSet provides O(n) solution for finding duplicates."
  },
  {
    "id": "java-array-hard-q3",
    "type": "fill-blank",
    "question": "The _____ algorithm can find maximum sum subarray in O(n) time.",
    "correctAnswer": "Kadane's",
    "explanation": "Kadane's algorithm efficiently finds maximum subarray sum."
  },
  {
    "id": "java-array-hard-q4",
    "type": "code-completion",
    "question": "Complete the method to rotate array right by k positions:",
    "code": "public static void rotate(int[] nums, int k) {\n    k = k % nums._____;\n    reverse(nums, 0, nums.length - 1);\n    reverse(nums, 0, _____ - 1);\n    reverse(nums, k, nums.length - 1);\n}",
    "blanks": ["length", "k"],
    "explanation": "Reverse algorithm: reverse whole array, then reverse parts."
  },
  {
    "id": "java-array-hard-q5",
    "type": "multiple-choice",
    "question": "What technique is used for range sum queries on immutable arrays?",
    "options": [
      "Prefix sum array",
      "Binary search",
      "Two pointers",
      "Hash table"
    ],
    "correctAnswer": 0,
    "explanation": "Prefix sum array enables O(1) range sum queries."
  },
  {
    "id": "java-array-hard-q6",
    "type": "drag-drop",
    "question": "Arrange steps for sliding window maximum:",
    "items": ["Initialize deque", "Process first window", "Slide window", "Remove out-of-range elements"],
    "correctOrder": [0, 1, 3, 2],
    "explanation": "Deque-based approach for sliding window maximum."
  },
  {
    "id": "java-array-hard-q7",
    "type": "fill-blank",
    "question": "For problems with large coordinate ranges, use _____ to map to smaller range.",
    "correctAnswer": "coordinate compression",
    "explanation": "Coordinate compression maps large ranges to manageable sizes."
  },
  {
    "id": "java-array-hard-q8",
    "type": "multiple-choice",
    "question": "How many subarrays are possible in an array of size n?",
    "options": [
      "n(n+1)/2",
      "nÂ²",
      "2^n",
      "n!"
    ],
    "correctAnswer": 0,
    "explanation": "Number of subarrays = n(n+1)/2 for array of size n."
  },
  {
    "id": "java-array-hard-q9",
    "type": "code-completion",
    "question": "Complete the method for Dutch National Flag problem:",
    "code": "public static void sortColors(int[] nums) {\n    int low = 0, mid = 0, high = nums.length - 1;\n    while (mid <= high) {\n        if (nums[mid] == 0) {\n            swap(nums, low++, _____++);\n        } else if (nums[mid] == 2) {\n            swap(nums, mid, _____--);\n        } else {\n            _____++;\n        }\n    }\n}",
    "blanks": ["mid", "high", "mid"],
    "explanation": "Three-pointer approach for sorting 0s, 1s, and 2s."
  },
  {
    "id": "java-array-hard-q10",
    "type": "multiple-choice",
    "question": "What is the space complexity of merge sort on arrays?",
    "options": [
      "O(n)",
      "O(1)",
      "O(log n)",
      "O(n log n)"
    ],
    "correctAnswer": 0,
    "explanation": "Merge sort requires O(n) extra space for merging arrays."
  }
]